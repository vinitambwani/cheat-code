# To check the version of docker installed on the machine

$> docker --version

# To view the system wide information regarding the docker installation

$> docker info

# To list all the images which are available locally 

$> docker image ls

OR 

$> docker images

# To list all the containers which are created and running

$> docker container ls

# To list all the containers which are created (including the containers which are running and which are stopped)

$> docker container ls -a 

# To inspect/view the configuration of a container 

$> docker container inspect <container-name/container-id>


----------------------------------------------------------------------------------------------------------
Image Layers:

history command : Shows the history of the image

$> docker history <image-name>:<tag>
Example:
$> docker history nginx:latest

inspect command: Inspect gives the metadata information of the image

$> docker image inspect <image-name>:<tag>

old command:
$>docker inspect <image-name>:<tag>

-----------------------------------------------------------------------------------------------------------

Tagging an image:

$> docker image tag --help

Docker image tag is used to create a target image that refers to the source image

$> docker image tag source_image[:tag] target_image[:tag]

where tag is optional for both source image, if not mentioned then latest will be the default tag

Example:

$> docker image tag nginx vinitambwani/nginx

This will tag the nginx image with latest tag in the local machine as vinitambwani/nginx with latest tag.
When you will run docker image ls command you will see both nginx and vinitambwani/nginx images but with the same image id.

------------------------------------------------------------------------------------------------------------

Pushing an image:

$>docker image push <image>

if you haven't logged in to docker then it will give access denied.

Example: 
$>docker image push vinitambwani/nginx

------------------------------------------------------------------------------------------------------------

Login to Docker hub:
$>docker login -u <username>

this command will prompt you for entering the password. on entering the password, it will be stored in an unencrypted format in
/home/<user>/.docker/config.json file

--------------------------------------------------------------------------------------------------------------

Logout from docker hub:

$>docker logout

--------------------------------------------------------------------------------------------------------------

Build a docker image:

$>docker build -f Dockerfile

--------------------------------------------------------------------------------------------------------------

Listing running containers:

$> docker ps 
(older command)

$> docker container ls

--------------------------------------------------------------------------------------------------------------

Listing all containers (running and stopped containers)

$> docker container ls -a

--------------------------------------------------------------------------------------------------------------

To get information about a docker image

$> docker image inspect <image-name>

--------------------------------------------------------------------------------------------------------------

To get information about a docker container 

$> docker container inspect <container-name/container-id>

--------------------------------------------------------------------------------------------------------------

To run a docker image:

$> docker run <image-name>:<tag-name>

this command will create the container for the given image with a random container-name

if the image has exposed any particular port and you want to map it to any other port in the host machine this can be 
done using -p option

$> docker run --name <container-name> -p <host-port>:<container-port> -d <image-name>:<tag:name>

--name: if you want to give any specific name to the container

-p <host-port>:<container-port> : So the port of the host machine is mapped to an exposed port of the container

-d, --detach This is a flag which starts a container as a background process that doesn't occupy your terminal

if you want to publishes all the exposed ports on the host machine as is then -P option is used, these are those ports which are exposed
using EXPOSE instruction in Dockerfile

$> docker run -P <image-name>:<tag-name>

if you want to set any environment variable in the container thne we can use -e, --env and --env-file flags to

Example:
$> docker run --env VAR1=value1 --env VAR2=value2 <image-name>:<tag-name>


if a file is containing variables in values like and if the name of the file is env.list

VAR1=value1
VAR2=value2

$> docker run --evn-file env.list <image-name>:<tag-name>


---------------------------------------------------------------------------------------------------------------

To remove/destroy a container from a machine

$> docker container remove <list of continer-ids/container-names separated by space>

---------------------------------------------------------------------------------------------------------------

To stop a running container:

$> docker container stop <list of container-ids/container-names separated by space>

This containers can be started again by using the start command 

$> docker container start <list of container-ids/container-names separated by space>

---------------------------------------------------------------------------------------------------------------





















